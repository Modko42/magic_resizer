import base64
import datetime
import hashlib
import io
import shutil
import time
import tkinter
import webbrowser
from tkinter import filedialog, messagebox
from threading import *
from tkinter.messagebox import showinfo, showwarning, showerror
from pathlib import Path
from tkinter.simpledialog import askstring

from PIL import Image, ImageTk

import PIL.Image
import os
import numpy as np

from tkinter import *

global original_folder_size
global path
global file_count
global finished_counter
global percent
global thread_finished_counter
global en_dict
global ch_dict
global active_dict
global start_time
global copy_finished_time
global compression_finished_time
global settings_locked
global failed_pw_attempts

file_count = 0
finished_counter = 0
percent = 0
thread_finished_counter = 0
original_folder_size = 0
path = ""
settings_locked = True
failed_pw_attempts = 0

en_dict = {
    "current_quality": "Current quality",
    "current_quality_png": "Current quality(PNG)",
    "no_root_folder": "No folder selected",
    "quality": "Quality: ",
    "quality_png": "Quality(PNG): ",
    "min_file_size": "Min file size: ",
    "max_file_size": "Max file size: ",
    "cpu_core_count": "CPU cores to use: ",
    "keep_originals": "Keep original pictures",
    "start_button": "Start",
    "preview_button": "Preview",
    "help_button": "Help",
    "open_button": "Choose folder",
    "app_name": "Amalgam Image Resize Tool v1.0",
    "help_window": "Help window",
    "help_1": "The Amalgam Image Resize Tool has been created to process any .jpeg, .jpg, .bmp or .png image to smaller filesize, ready to upload into Sharepoint.",
    "help_2": "It does not resize or change image resolution.",
    "help_3": "Input images formats are:  .jpg, .jpeg, .png, .bmp.",
    "help_4": "Output format is .jpg (.png .bmp will be converted to .jpg).",
    "help_5": "Recursive sub-folder processing!",
    "help_6": "High quality & very fast processing!",
    "how_to_use": "How to use:\nUse the 'Choose Folder' button to select a folder containing images.\nAny sub folders containing images will also be processed. \n\nQuality setting % for .jpg & .bmp:\nPresent to 89%.  ANY original .jpeg or .bmp image at this quality setting will be reduced to over half it's filesize with zero loss of quality.\nQuality setting % for .png: \nPNG original images need a different setting.  Present to 95%.  ANY original .png image at this quality setting will be reduced to at least half it's original filesize.\n\nMin Size (MB):\nThis controls the minimum size of image files to process. For example: Source folder contains 1mb images files that we do not want to reduce in size any further. So, set Min Size to 1mb, any source image file smaller than 1mb will be ignored.\n\nMax Size (MB):\nThis controls the minimum size of image files to process. Ignore any source image files over specified filesize in mb.\n\nCPU Threads:\nThis is set at 8 cpu threads by default. If you have higher performance cpu with more core/thread's then enter higher value to increase performance.\n\nKeep Original Files:\nIf un-checked, the original source images will be over-written in place.\nIf checked a re-saved copy of the source folder will be created next to the source. (sub-folder structure will be kept).",
    "help_max_width": 800,
    "help_max_height": 655,
    "coded_by": "Coded by Beni Kenesei"
}
ch_dict = {
    "current_quality": "当前质量",
    "current_quality_png": "Current quality(PNG)",
    "no_root_folder": "未选择文件夹",
    "quality": "品质%.jpg.bmp ",
    "quality_png": "品质%.png ",
    "min_file_size": "最小尺寸（MB）",
    "max_file_size": "最大尺寸（MB）",
    "cpu_core_count": "CPU线程数",
    "keep_originals": "保留原始文件",
    "start_button": "开始",
    "preview_button": "预览",
    "help_button": "帮助",
    "open_button": "选择文件夹",
    "app_name": "Amalgam 图像调整工具 v1.0",
    "help_window": "帮助窗口",
    "help_1": "Amalgam图片大小调整工具支持jpeg、 jpg、bmp及png格式，可缩小文件大小，便于上传至Sharepoint。",
    "help_2": "图像分辨率不变。",
    "help_3": "导入的图片格式有: jpg、jpeg、png、 bmp。",
    "help_4": "导出格式为jpg(png及bmp将被转换为jpg)",
    "help_5": "可处理多层子文件夹",
    "help_6": "高画质&快速图片处理",
    "how_to_use": "如何使用\n使用“选择文件夹”按钮选择一个包含图像的文件夹。 任何包含图像的子文件夹也将被处理。\njpg和bmp格式画质设置%:\n默认89%。 在该设置下，任何jpeg或bmp图片将缩小至原始文件大小的一半以上，且画质零损失。\npng格式画质设置%:\nPng图片画质设置不同。默认95%。 在该设置下，任何png图片将被缩小至原始文件大小的至少一半。\n最小尺寸（MB）\n控制要处理的图像文件的最小尺寸。 示例:源文件夹包含1mb的图像文件，我们不想进一步减少其大小。 因此，将Min Size设置为1mb，任何小于1mb的源文件将被忽略。\n最大尺寸（MB）\n默认值50 mb。 控制要处理的图像文件的最大尺寸。 示例:忽略超过指定文件大小(以兆为单位)的任何源文件。\nCPU线程数默认8个CPU线程。 如果您有更高性能的CPU和更多的核/线程，那么输入更高的值来提高性能。\n保留原始文件:\n如果未勾选，原始图像将被覆盖 \n如果选中此项，将在源文件夹旁边创建源文件夹的副本。 (子文件夹结构将被保留)。\n",
    "help_max_width": 650,
    "help_max_height": 520,
    "coded_by": "由 beni kenesei 编码"
}

active_dict = en_dict

base64_string_logo = ""
base64_string_full_logo = ""
base64_string_lock_icon = "iVBORw0KGgoAAAANSUhEUgAAAIAAAACgCAYAAADEkmT9AAAACXBIWXMAAAOKAAADigGnjPUfAAAGoGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNy4yLWMwMDAgNzkuMWI2NWE3OWI0LCAyMDIyLzA2LzEzLTIyOjAxOjAxICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjMuNSAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjItMTAtMTlUMTQ6Mzc6MzArMDI6MDAiIHhtcDpNb2RpZnlEYXRlPSIyMDIyLTEwLTE5VDE0OjQzOjI3KzAyOjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDIyLTEwLTE5VDE0OjQzOjI3KzAyOjAwIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDoyYjM5ZTFjZi0zYzAwLTQ3MWItOWI4Ny1hYTdhZWJhNjBkYjEiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDpiNTg5MjYxYS1kYTI3LTE1NGItYjA4ZC00N2NjMDgzNDA5NDAiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDozZGFlYWZmYi1jZjA4LTRlNGYtYTk2Yy1iMzJiMTNmM2M2YWEiPiA8eG1wTU06SGlzdG9yeT4gPHJkZjpTZXE+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjcmVhdGVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjNkYWVhZmZiLWNmMDgtNGU0Zi1hOTZjLWIzMmIxM2YzYzZhYSIgc3RFdnQ6d2hlbj0iMjAyMi0xMC0xOVQxNDozNzozMCswMjowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIzLjUgKE1hY2ludG9zaCkiLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjYwY2YwYzdkLWEyZWYtNDY3Yy04YjA0LTliZjRkMGY4NzkyYyIgc3RFdnQ6d2hlbj0iMjAyMi0xMC0xOVQxNDozODo0MyswMjowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIzLjUgKE1hY2ludG9zaCkiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjJiMzllMWNmLTNjMDAtNDcxYi05Yjg3LWFhN2FlYmE2MGRiMSIgc3RFdnQ6d2hlbj0iMjAyMi0xMC0xOVQxNDo0MzoyNyswMjowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIzLjUgKE1hY2ludG9zaCkiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPC9yZGY6U2VxPiA8L3htcE1NOkhpc3Rvcnk+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+H3XrLgAACMVJREFUeNrtnWtsFFUUx89OC30/oEApFRFFCggUDE8TiURA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"
base64_string_open_lock_icon = "iVBORw0KGgoAAAANSUhEUgAAAIAAAACgCAYAAADEkmT9AAAACXBIWXMAAAOKAAADigGnjPUfAAAGoGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNy4yLWMwMDAgNzkuMWI2NWE3OWI0LCAyMDIyLzA2LzEzLTIyOjAxOjAxICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjMuNSAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjItMTAtMTlUMTQ6Mzc6MzArMDI6MDAiIHhtcDpNb2RpZnlEYXRlPSIyMDIyLTEwLTE5VDE0OjQyOjMyKzAyOjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDIyLTEwLTE5VDE0OjQyOjMyKzAyOjAwIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDowOTEzNDdlZC1iNmEyLTQzYTEtYmZjNS02YzU1ZGY2MmI4NmUiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDplMTA0ZjBmNS1lZjc3LTM2NDctOGI2Yy1iMGNlODRhM2MwZDYiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDozZGFlYWZmYi1jZjA4LTRlNGYtYTk2Yy1iMzJiMTNmM2M2YWEiPiA8eG1wTU06SGlzdG9yeT4gPHJkZjpTZXE+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjcmVhdGVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjNkYWVhZmZiLWNmMDgtNGU0Zi1hOTZjLWIzMmIxM2YzYzZhYSIgc3RFdnQ6d2hlbj0iMjAyMi0xMC0xOVQxNDozNzozMCswMjowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIzLjUgKE1hY2ludG9zaCkiLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjYwY2YwYzdkLWEyZWYtNDY3Yy04YjA0LTliZjRkMGY4NzkyYyIgc3RFdnQ6d2hlbj0iMjAyMi0xMC0xOVQxNDozODo0MyswMjowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIzLjUgKE1hY2ludG9zaCkiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjA5MTM0N2VkLWI2YTItNDNhMS1iZmM1LTZjNTVkZjYyYjg2ZSIgc3RFdnQ6d2hlbj0iMjAyMi0xMC0xOVQxNDo0MjozMiswMjowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIzLjUgKE1hY2ludG9zaCkiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPC9yZGY6U2VxPiA8L3htcE1NOkhpc3Rvcnk+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+Kbe2gQAACZNJREFUeNrtnX1sVeUdxz+3rfSWtrS0YCmlVqa2giLgENgW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"

def get_file_size_inMB(file):
    return os.stat(file).st_size / 1048576


def get_folder_size(root):
    size = 0
    for path, dirs, files in os.walk(root):
        for f in files:
            size += os.path.getsize(os.path.join(path, f)) / 1048576
    return round(size, 2)


def callback():
    print(active_dict["current_quality"] + str(quality_var.get()))
    print(active_dict["current_quality_png"] + str(quality_png_var.get()))
    print("Current min file size: " + str(min_file_size_var.get()))
    print("Current max file size: " + str(max_file_size_var.get()))
    print("CPU cores to use: " + str(cpu_core_count_var.get()))
    print("Keep originals: " + str(keep_originals.get()))
    print("Current language is english: " + str(selected_language_eng.get()))


def update_dict():
    global active_dict
    global en_dict
    global ch_dict
    if int(selected_language_eng.get()) == 1:
        active_dict = en_dict
    else:
        active_dict = ch_dict
    callback()


window = Tk()

folder_label_var = StringVar()
folder_label_var.set(active_dict['no_root_folder'])

quality_var = StringVar()
quality_png_var = StringVar()
min_file_size_var = StringVar()
max_file_size_var = StringVar()
status_var = StringVar()
cpu_core_count_var = StringVar()
keep_originals = StringVar()
selected_language_eng = IntVar()

quality_var.set(89)
quality_png_var.set(95)
min_file_size_var.set(2)
max_file_size_var.set(50)
status_var.set("")
cpu_core_count_var.set(4)
try:
    if os.cpu_count() in range(2, 20, 1):
        cpu_core_count_var.set(str(round(os.cpu_count() * 0.8)))
    else:
        cpu_core_count_var.set(4)
except:
    cpu_core_count_var.set(4)
keep_originals.set(1)
selected_language_eng.set(1)


def draw_gui():
    def update_labels():
        update_dict()
        quality_label.config(text=active_dict['quality'])
        quality_png_label.config(text=active_dict['quality_png'])
        min_file_size_label.config(text=active_dict['min_file_size'])
        max_file_size_label.config(text=active_dict['max_file_size'])
        cpu_core_count_label.config(text=active_dict['cpu_core_count'])
        keep_originals_label.config(text=active_dict['keep_originals'])
        start_button.config(text=active_dict['start_button'])
        preview_button.config(text=active_dict['preview_button'])
        open_button.config(text=active_dict['open_button'])
        help_button.config(text=active_dict['help_button'])
        folder_label_var.set(active_dict['no_root_folder'])
        window.title(active_dict['app_name'])
        coded_by_label.config(text=active_dict['coded_by'])

    def open_button_command():
        select_file()
        update_start_button_state()

    def update_start_button_state():
        global path
        if os.path.isdir(path):
            start_button.config(state=NORMAL)
        else:
            start_button.config(state=DISABLED)

    window.title(active_dict['app_name'])
    window.geometry("450x300+200+200")
    window.resizable(False, False)
    open_button = tkinter.Button(window, text='Choose folder', command=open_button_command)
    open_button.place(x=20, y=20)
    folder_label = tkinter.Label(window, textvariable=folder_label_var)
    folder_label.place(x=200, y=22)

    quality_label = tkinter.Label(window, text=active_dict['quality'])
    quality_label.place(x=20, y=60)
    quality_var.trace("w", lambda name, index, mode, quality_var=quality_var: callback())
    quality_field = tkinter.Entry(window, width=3, textvariable=quality_var)
    quality_field.place(x=150, y=60)

    quality_png_label = tkinter.Label(window, text="Quality(png): ")
    quality_png_label.place(x=20, y=90)
    quality_png_var.trace("w", lambda name, index, mode, quality_png_var=quality_png_var: callback())
    quality_png_field = tkinter.Entry(window, width=3, textvariable=quality_png_var)
    quality_png_field.place(x=150, y=90)

    min_file_size_label = tkinter.Label(window, text="Min size(MB): ")
    min_file_size_label.place(x=20, y=120)
    min_file_size_var.trace("w", lambda name, index, mode, min_file_size_var=min_file_size_var: callback())
    min_file_size_field = tkinter.Entry(window, width=3, textvariable=min_file_size_var)
    min_file_size_field.place(x=150, y=120)

    max_file_size_label = tkinter.Label(window, text="Max size(MB): ")
    max_file_size_label.place(x=20, y=150)
    max_file_size_var.trace("w", lambda name, index, mode, max_file_size_var=max_file_size_var: callback())
    max_file_size_field = tkinter.Entry(window, width=3, textvariable=max_file_size_var)
    max_file_size_field.place(x=150, y=150)

    cpu_core_count_label = tkinter.Label(window, text="CPU cores to use: ")
    cpu_core_count_label.place(x=20, y=180)
    cpu_core_count_var.trace("w", lambda name, index, mode, cpu_core_count_var=cpu_core_count_var: callback())
    cpu_core_count_field = tkinter.Entry(window, width=3, textvariable=cpu_core_count_var)
    cpu_core_count_field.place(x=150, y=180)

    keep_originals_label = tkinter.Checkbutton(window, text='Keep original pictures', command=clear_path,
                                               variable=keep_originals,
                                               onvalue=1, offvalue=0)
    keep_originals_label.place(x=20, y=207)

    def start_button_command():
        start_new_threads()
        start_button.config(state=DISABLED)

    start_button = tkinter.Button(window, text="Start", command=start_button_command)
    start_button.place(x=55, y=250)



    preview_button = tkinter.Button(window, text="Preview", command=make_preview)
    preview_button.place(x=125, y=250)

    status_label = tkinter.Label(window, width=30, textvariable=status_var, justify=LEFT)
    status_label.place(x=200, y=60)

    radiobutton_en = tkinter.Radiobutton(window, text="EN", variable=selected_language_eng, value=1,
                                         command=update_labels)
    radiobutton_en.place(x=260, y=2)
    radiobutton_ch = tkinter.Radiobutton(window, text="中国人", variable=selected_language_eng, value=0,
                                         command=update_labels)
    radiobutton_ch.place(x=305, y=2)

    help_button = tkinter.Button(window, text="Help", command=open_help_page)
    help_button.place(x=375, y=0)

    amalgam_logo_image = PIL.Image.open(io.BytesIO(base64.decodebytes(bytes(base64_string_full_logo, "utf-8"))))
    amalgam_logo_image = amalgam_logo_image.resize(
        ((round(amalgam_logo_image.size[0] * 0.33), round(amalgam_logo_image.size[1] * 0.33))))
    amalgam_logo = ImageTk.PhotoImage(amalgam_logo_image)
    logo_label = tkinter.Label(image=amalgam_logo)
    logo_label.place(x=235, y=230)

    ac_logo = PIL.Image.open(io.BytesIO(base64.decodebytes(bytes(base64_string_logo, "utf-8"))))
    ac_logo_image = ImageTk.PhotoImage(ac_logo)
    window.iconphoto(False, ac_logo_image)

    coded_by_label = tkinter.Label(window, text=active_dict['coded_by'], font=("TkDefaultFont", 8))
    coded_by_label.place(x=315, y=278)
    coded_by_label.bind("<Button-1>", lambda e: open_email())

    lock_icon = PIL.Image.open(io.BytesIO(base64.decodebytes(bytes(base64_string_lock_icon, "utf-8"))))

    lock_icon = lock_icon.resize(
        ((round(lock_icon.size[0] * 0.2), round(lock_icon.size[1] * 0.2))))
    lock_icon_image = ImageTk.PhotoImage(lock_icon)

    unlock_icon = PIL.Image.open(io.BytesIO(base64.decodebytes(bytes(base64_string_open_lock_icon, "utf-8"))))

    unlock_icon = unlock_icon.resize(
        ((round(unlock_icon.size[0] * 0.2), round(unlock_icon.size[1] * 0.2))))
    unlock_icon_image = ImageTk.PhotoImage(unlock_icon)

    lock_icon_label = tkinter.Label(image=lock_icon_image)
    lock_icon_label.place(x=15,y=242)
    lock_icon_label.bind("<Button-1>",lambda e: change_labels())

    quality_field.config(state=DISABLED)
    quality_png_field.config(state=DISABLED)
    min_file_size_field.config(state=DISABLED)
    max_file_size_field.config(state=DISABLED)
    cpu_core_count_field.config(state=DISABLED)
    keep_originals_label.config(state=DISABLED)
    start_button.config(state=DISABLED)



    def change_labels():
        global settings_locked
        global failed_pw_attempts
        if settings_locked:
            password = askstring('Password', 'Enter password:', show="*")
            pw_hash = b'A\xe1N\xa9\t\x83\xfdr\x06\xfa\xd1\xb0\x00\t\x12\xd0'
            if hashlib.md5(bytes(password, 'utf-8')).digest() != pw_hash:
                failed_pw_attempts += 1
                if failed_pw_attempts == 1:
                    showerror('Resize Tool', 'Wrong password!')
                    return
                else:
                    error_box = Toplevel(window)
                    error_box.title('Error')
                    error_box.geometry("200x80+600+200")
                    label = tkinter.Label(error_box,text='Self-destruct in 3..2..1')
                    label.pack()
                    error_box.after(2000,lambda :error_box.destroy())
                    return


            lock_icon_label.config(image=unlock_icon_image)
            lock_icon_label.image = unlock_icon_image
            quality_field.config(state=NORMAL)
            quality_png_field.config(state=NORMAL)
            min_file_size_field.config(state=NORMAL)
            max_file_size_field.config(state=NORMAL)
            cpu_core_count_field.config(state=NORMAL)
            keep_originals_label.config(state=NORMAL)
        else:
            lock_icon_label.config(image=lock_icon_image)
            lock_icon_label.image = lock_icon_image
            quality_field.config(state=DISABLED)
            quality_png_field.config(state=DISABLED)
            min_file_size_field.config(state=DISABLED)
            max_file_size_field.config(state=DISABLED)
            cpu_core_count_field.config(state=DISABLED)
            keep_originals_label.config(state=DISABLED)
        settings_locked = not settings_locked
    window.mainloop()


def open_email():
    webbrowser.open('mailto:?to=benjamin.kenesei@amalgamcollection.eu&subject=Image resizer feedback', new=1)


def open_help_page():
    help_window = Toplevel(window)
    help_window.title(active_dict['help_window'])
    help_window.geometry("800x655+650+150")
    help_window.maxsize(active_dict['help_max_width'], active_dict['help_max_height'])
    text = tkinter.Text(help_window, height=40, width=80, wrap=WORD, font=("TkDefaultFont", 15))
    scrollbar = tkinter.Scrollbar(help_window, command=text.yview, orient=VERTICAL)

    scrollbar.pack(side=tkinter.RIGHT, fill='y')

    text.pack(side=tkinter.LEFT)
    text.config(yscrollcommand=scrollbar.set)
    text.insert(tkinter.END, active_dict['help_1'] + "\n" + active_dict['help_2'] + "\n"
                + active_dict['help_3'] + "\n" + active_dict['help_4'] + "\n" + active_dict['help_5'] + "\n" +
                active_dict['help_6'] + "\n\n" + active_dict['how_to_use'])
    text.config(state=DISABLED)


def clear_path():
    global path
    path = "No root folder selected"
    folder_label_var.set(path)


def select_file():
    global path
    path = filedialog.askdirectory(
        title='Open a file',
        initialdir='/')
    if not os.path.isdir(path):
        folder_label_var.set("No root folder selected")
    else:
        folder_label_var.set(path[-60:-30] + '\n' + path[-30:])


def list_all_files():
    global original_folder_size
    global path
    global copy_finished_time
    if int(keep_originals.get()) == 1:
        status_var.set("Copying files")
        current_working_directory = Path(path).parent.resolve()
        new_directory_name = str(
            os.path.basename(path) + "_resized_" + str(datetime.datetime.now().strftime("%H_%M_%S")))
        new_directory_path = os.path.join(current_working_directory, new_directory_name)
        shutil.copytree(path, new_directory_path)
        copy_finished_time = time.time()
        path = new_directory_path
        folder_label_var.set(path[-60:-30] + '\n' + path[-30:])
    filepaths = []
    for subdir, dirs, files in os.walk(path):
        for file in files:
            file_size = get_file_size_inMB(subdir + '/' + file)
            if float(min_file_size_var.get()) < file_size < float(max_file_size_var.get()):
                filepaths.append(subdir + '/' + file)

    print("Files found: " + str(len(filepaths)))
    original_folder_size = get_folder_size(path)
    return filepaths


def make_preview():
    try:
        preview_path = filedialog.askopenfile(
            title='Choose a file to preview settings',
            initialdir='/').name
        shutil.copy(preview_path,
                    os.path.join(Path(preview_path).parent.resolve(), str(Path(preview_path).stem)) + '_resized' + Path(
                        preview_path).suffix)
        resize([os.path.join(Path(preview_path).parent.resolve(), str(Path(preview_path).stem)) + '_resized' + Path(
            preview_path).suffix], Preview_mode=True)
        showinfo("Success", "Preview generated!")
    except Exception as e:
        print(e)
        print("You probably didn't choose a file!")


def valid_folder_path(_path):
    try:
        if os.path.isdir(_path):
            return True
    except:
        return False


def start_new_threads():
    global path
    if not valid_folder_path(path):
        showwarning("Warning", "No folder selected")
        return

    global start_time
    global copy_finished_time
    start_time = time.time()
    copy_finished_time = start_time
    global finished_counter
    global percent
    global thread_finished_counter
    global file_count
    finished_counter = 0
    percent = 0
    thread_finished_counter = 0
    try:
        files_fullpath = np.array(list_all_files())
        file_count = len(files_fullpath)
        chunks = np.array_split(files_fullpath, int(cpu_core_count_var.get()))
        for thr in range(0, int(cpu_core_count_var.get())):
            Thread(target=resize, args=[chunks[thr]]).start()
    except Exception as e:
        print("Probably Folder already exists!")
        print(e)


def resize(file_paths, Preview_mode=False):
    global finished_counter
    global percent
    global thread_finished_counter
    for file in file_paths:
        if os.path.isfile(file) and file.split('.')[-1].lower() == 'jpg':
            try:
                im = PIL.Image.open(file)
                f, e = os.path.splitext(file)
                im.save(f + '.jpg', 'JPEG', quality=int(quality_var.get()))
            except Exception as e:
                print(e)
                print("Problem with image: " + str(file))
            finished_counter = finished_counter + 1
        if os.path.isfile(file) and file.split('.')[-1].lower() == 'bmp':
            try:
                im = PIL.Image.open(file)
                f, e = os.path.splitext(file)
                im.save(f + '.jpg', 'JPEG', quality=int(quality_var.get()))
                im.close()
                os.remove(file)
            except Exception as e:
                print(e)
                print("Problem with image: " + str(file))
            finished_counter = finished_counter + 1
        if os.path.isfile(file) and file.split('.')[-1].lower() == 'png':
            try:
                im = PIL.Image.open(file).convert('RGB')
                f, e = os.path.splitext(file)
                im.save(f + '.jpg', 'JPEG', quality=int(quality_png_var.get()))
                im.close()
                os.remove(file)
            except Exception as e:
                print(e)
                print("Problem with image: " + str(file))
            finished_counter = finished_counter + 1
        if not Preview_mode:
            if percent + 1 < round(100 * finished_counter / file_count, 2):
                percent = round(100 * finished_counter / file_count, 2)
                status_var.set("Compressing images " + str(percent) + "%")
    thread_finished_counter += 1
    if thread_finished_counter == int(cpu_core_count_var.get()):
        global compression_finished_time
        compression_finished_time = time.time()
        global path
        status_var.set("Compression finished!")
        showinfo("Success", "Image compression finished")
        path = "No root folder selected"
        folder_label_var.set(path)
        print("\n\nTotal time  " + str(round(compression_finished_time - start_time, 2)) + " s")
        print("File copy   " + str(round(copy_finished_time - start_time, 2)) + " s")
        print("Compression " + str(round(compression_finished_time - copy_finished_time, 2)) + " s")


draw_gui()
